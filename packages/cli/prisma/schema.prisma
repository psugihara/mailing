// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("MAILING_DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  password  String

  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
}

model Organization {
  id     String   @id @default(cuid())
  name   String
  User   User[]
  ApiKey ApiKey[]
}

model ApiKey {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  active         Boolean      @default(true)
  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
}

// Start ANALYTICS schema
// created when Sends are created
// This table will probably get big and we'd want to truncate at some point
// or only retain last N etc.
model EmailContent {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  html      String
  subject   String
  Send      Send[]
}

// created by sendMail calls
// one created for each recipient email ({ to: me, bcc: [elliot, steven] } creates 3 Sends, 1 EmailContent)
model Send {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  to             String // email address
  templateName   String? // reference to a mailing template
  previewName    String? // reference to a mailing preview
  // created by tracking pixel
  // only store first open timestamp, then increment count
  openedAt       DateTime?
  // increment using Prisma’s `increment` function
  openCount      Int          @default(0)
  openLocation   String? // store country data using middleware (example)
  Click          Click[]
  emailContentId String
  EmailContent   EmailContent @relation(fields: [emailContentId], references: [id])

  @@index([to])
  @@index([templateName, previewName])
}

// created by /api/click proxy urls
// only store first click, then increment count
model Click {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) // first click
  updatedAt DateTime @updatedAt // last click
  url       String
  // increment using Prisma’s `increment` function
  count     Int      @default(0)
  sendId    String
  Send      Send     @relation(fields: [sendId], references: [id])

  @@unique([sendId, url])
  @@index([sendId])
}

// end ANALYTICS schema
